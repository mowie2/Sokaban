using ConsoleApplication1.generatedcode;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class Level
{
    private string name
    {
        get;
        set;
    }

	private int xSize
	{
		get;
		set;
	}

	private int ySize
	{
		get;
		set;
	}

	public Item[,] playingField;

    InputView iv;
    Truck truck;

	public virtual OutputView OutputView
	{
		get;
		set;
	}
    public Level(List<string> levelFormat)
    {
        iv = new InputView();
        truck = new Truck();
        PrepareArray(levelFormat);

    }
    public void UpdateField()
    {
        //clear the console so we can get a correct representation of whats in our array
        Console.Clear();
        // loop through the array
        for (int j = 0; j < xSize; j++)
        {
            for (int i = 0; i < ySize; i++)
            {
                if (playingField[j,i] != null)
                {
                    // check if the item is a field
                    if(playingField[j,i].GetType() == typeof(Field))
                    {
                        // determin the name that the field needs to display
                        Field temp = (Field)playingField[j,i];
                        temp.DeterminName();
                    }

                    playingField[j,i].PrintName();
                    if (i == ySize - 1)
                    {
                        Console.WriteLine("");
                    }
                }
               
            }
        }
    }

    public void MoveTruck(string _key)
    {
        switch (_key.ToString().ToUpper())
        {
            case "D":
                truck.MoveRight();
                break;
            case "S":
                truck.MoveDown();
                break;
            case "A":
                truck.Moveleft();
                break;
            case "W":
                truck.MoveUp();
                break;
        }
    }

    public void PrepareArray(List<string> levelFormat)
    {
        // find the levels maximum size
        ySize = 0;
        xSize = levelFormat.Count();
        for (int index = 0; index < levelFormat.Count(); index++)
        {
            if (levelFormat[index].Length > ySize)
            {
                ySize = levelFormat[index].Length;
            }
        }
        // declaire array 
        playingField = new Item[xSize, ySize];

        // fill array
        for (int xAxis = 0; xAxis < levelFormat.Count(); xAxis++)
        {
            string s = levelFormat[xAxis];

            for (int yAxis = 0; yAxis < levelFormat[xAxis].Length; yAxis++)
            {
                string found = s[yAxis].ToString();
                
                if(found.Equals("@") || found.Equals("o"))
                {
                    playingField[xAxis, yAxis] = new Field(".");
                }
                else
                {
                    playingField[xAxis, yAxis] =  new Field(found);
                }
                
            }
        }
    }
}

